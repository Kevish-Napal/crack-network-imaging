

///////////////////////////// << Parameters ///////////////////////////////////

// Choose Geometry between the following:
string[int] AvailableGeometries = ["Geometry_full","Geometry_1","Geometry_2","Geometry_3","Geometry_4","Geometry_5","Geometry_fullHighRes","Geometry_fullHighResMax"];
int ChoseGeometry = 8;

///////////////////////////// Parameters >> ///////////////////////////////////


// << Labels !! Must be as for the definitions of the mesh!
int Radiacond = 99;  // Condition de radiation sur ce bord
int crack = 94;
// >>


string Geometry = AvailableGeometries[ChoseGeometry-1];
mesh Th = readmesh(Geometry + "/Th.msh");
//plot(Th,wait=1);


macro Grad(u) [dx(u),dy(u)]//
real ttt;


// wavenumber:
real k, Rext;

{
ifstream fileinfo(Geometry + "/info" + ".dat");
fileinfo >> k;
fileinfo >> Rext;
} ;

cout << "Params: k=" << k << ", Rext=" <<  Rext << endl;


////// Definition des sources, capteurs et matrice qui va contenir les données du FF à chaque itérations /////////////
int Nbcapteur=100; // Big N in the paper, number of sources and measurements
real[int] thetaSource(Nbcapteur);
real[int] thetaRecepteur(Nbcapteur);
thetaSource=0:(2*pi/Nbcapteur):2*pi;
thetaRecepteur =0:(2*pi/Nbcapteur):2*pi;
real[int, int] MSRRealinfty(Nbcapteur,Nbcapteur);  // pour sauvegarder la matrice de réponse
real[int, int] MSRImaginfty(Nbcapteur,Nbcapteur);
//////////////////////////////////////////////////////////


fespace FS2(Th,P2);

////////////////////// Debut DtN //////////////////////////

matrix<complex> EFL ;
{// free some space
//int nbfpro =4*pext/(5*Rext/lambda);
real nbfprotemp = k*Rext;
int nbfpro = k*Rext; // selon Houssem, le 10 est arbitraire c'est pour éviter qu'il n'y ait que 2 fonctions...
cout<<"nombre de fonctions propres = " <<nbfpro<<endl;

FS2<complex>  u,v;
//fonction de la base de fourier
func complex expin(real x1,real x2, int n)
{
	real theta = atan2(x2,x1);
	return (exp(1i*n*theta)/sqrt(2*pi*Rext));
}


//matrice d'integration exp(intheta) contre les  elements finis sur le bord
complex[int,int] vDtN( FS2.ndof, 2*nbfpro+1);
matrix<complex> DtN;

for (int n=-nbfpro;n<nbfpro+1;n++)
{
	func f= expin(x,y,n);
	varf FiniFourier(uu,vv) = int1d(Th,Radiacond)(vv*f);
	complex[int] temp = FiniFourier(0,FS2);
	vDtN(:,n+nbfpro)=temp;
}
DtN=vDtN;


// Construction de la matrice diagonale pour construire les EFL
matrix<complex> D;
complex[int] diagofD(2*nbfpro+1);
complex hnr,hn0,hn1,hnp;

hn0=j0(k*Rext)+1i*y0(k*Rext);
hn1=-(j1(k*Rext)+1i*y1(k*Rext)); // Corrigée
diagofD[nbfpro] = k*hn1/hn0;


for (int n =1;n<nbfpro;n++)
{
	hnr =jn(n,k*Rext)+1.i*yn(n,k*Rext);
	hnp = n*hnr/(k*Rext) - (jn(n+1,k*Rext)+1.i*yn(n+1,k*Rext));// Corrigée
	diagofD[nbfpro+n] = k*hnp/hnr;
	diagofD[nbfpro-n] = k*hnp/hnr;
}
D = [diagofD];


// Assemblage final et réorganisation pour pouvoir l'integrer a la formulation variationnelle

EFL = DtN*D;
EFL= EFL*DtN';
} // free some space
// On multiplie par moins 1 pour pouvoir l'ajouter à la formulation canonique de l'équation de Helmholtz
// cad : grad(u)grad(v) - k^2uv  (signe plus devant le grad).
EFL=-EFL;
// EFL désigne donc l'opérateur -T où T est l'opérateur de Dirichlet to Neumann qui satisfait
// d_n u_s = T u_s.

		          ////////////////////// Fin DtN //////////////////////////


matrix<complex> A, B, FF;
FS2<complex> F;
FS2<complex> Usol;

FS2<complex> phiinfty ; //green function (radiation)
FS2<complex> test;
complex test2;

// FarField
varf FarField(u,v)= int1d(Th,crack)(exp(1.i*pi/4.)/sqrt(8.*pi*k)*([N.x,N.y]'*Grad(v)*u-[N.x,N.y]'*Grad(u)*v)); //cf Colton Kress p.75 formule (3.87)
FF=FarField(FS2,FS2);

// Pour gérer la condition de dirichlet, on résout plutot léquation du champs total.
// c'est plus pratique: la matrice de masse est alors indépendante de l'onde incidente.

{
	varf BiLi(u,v)= int2d(Th)(Grad(v)'*Grad(u)-u*v'*k^2) ; // bilinear form of helmholtz equation
	matrix<complex> Atmp;
	Atmp=BiLi(FS2,FS2);
	A=Atmp+EFL;
}

set(A,solver=sparsesolver);

for (int itercapteur=0;itercapteur<Nbcapteur;itercapteur++)
	{ // boucle sur onde incidente

		cout << itercapteur << endl;
		ttt = clock();
		func PhiinftySource=exp(1.i*k*(cos(thetaSource(itercapteur))*x+sin(thetaSource(itercapteur))*y)); // incident plane waves : u^i

		phiinfty = PhiinftySource;
		varf TermeSource([phiinfty],[v]) = -int1d(Th,crack)(1.i*k*(N.x*cos(thetaSource(itercapteur))+N.y*sin(thetaSource(itercapteur)))*phiinfty*v');
		B = TermeSource(FS2,FS2);
		F[]= B*phiinfty[];
		Usol[]=A^-1*F[];

/*
		FS2<complex> Usoltot;
		FS2 PlotTemp;
		Usoltot = Usol+phiinfty;
		PlotTemp = real(Usoltot);
		plot(PlotTemp,fill=1,wait=1,value=1,cmm = "Usoltot");
		PlotTemp = real(Usol);
		plot(PlotTemp,fill=1,wait=1,value=1,cmm = "Usol");
*/

		 for (int nn=0;nn<Nbcapteur;nn++)
		 { // Boucle de remplissage du FF
				func PhiinftyRecepteur=exp(-1.i*k*(cos(thetaRecepteur(nn))*x+sin(thetaRecepteur(nn))*y));
				phiinfty=PhiinftyRecepteur;
				test[]=FF*phiinfty[];
       	Usol[]=conj(Usol[]);
				test2=Usol[]'*test[];  //car on a fait la conjugaison plus haut

				MSRRealinfty(nn,itercapteur)=real(test2);
				MSRImaginfty(nn,itercapteur)=imag(test2);


		 } // FIN Boucle de remplissage du FF

		 	cout<< "Remaining time: " << (clock()-ttt)*(Nbcapteur - itercapteur-1)/3600. << " hours" <<endl;

	} // FIN boucle sur onde incidente




					 {
					 ofstream fileoutput(Geometry + "/FReal" + ".dat");
					 fileoutput << " " << MSRRealinfty;
					 } ;
					 {
					 ofstream fileoutput(Geometry + "/FImage" + ".dat");
					 fileoutput  << " " << MSRImaginfty;
					 } ;
